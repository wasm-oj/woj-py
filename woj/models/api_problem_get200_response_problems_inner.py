# coding: utf-8

"""
    WASM OJ Wonderland API

    You can interact with WASM OJ Wonderland through this API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: jacob@csie.cool
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class ApiProblemGet200ResponseProblemsInner(BaseModel):
    """
    Problem
    """
    sub: Dict[str, Union[StrictFloat, StrictInt]] = Field(..., description="Submission count of each status")
    id: StrictStr = Field(..., description="Problem ID")
    name: StrictStr = Field(..., description="Problem name")
    tags: conlist(StrictStr) = Field(..., description="Problem tags")
    __properties = ["sub", "id", "name", "tags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiProblemGet200ResponseProblemsInner:
        """Create an instance of ApiProblemGet200ResponseProblemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiProblemGet200ResponseProblemsInner:
        """Create an instance of ApiProblemGet200ResponseProblemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiProblemGet200ResponseProblemsInner.parse_obj(obj)

        _obj = ApiProblemGet200ResponseProblemsInner.parse_obj({
            "sub": obj.get("sub"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "tags": obj.get("tags")
        })
        return _obj

