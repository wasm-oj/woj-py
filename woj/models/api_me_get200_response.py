# coding: utf-8

"""
    WASM OJ Wonderland API

    You can interact with WASM OJ Wonderland through this API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: jacob@csie.cool
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ApiMeGet200Response(BaseModel):
    """
    ApiMeGet200Response
    """
    id: Optional[StrictStr] = Field(None, description="User ID")
    email: Optional[StrictStr] = Field(None, description="User's email")
    exp: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Token expiration time, in seconds since epoch")
    pea: StrictStr = Field(..., description="The PEA login URL that this app uses")
    __properties = ["id", "email", "exp", "pea"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiMeGet200Response:
        """Create an instance of ApiMeGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiMeGet200Response:
        """Create an instance of ApiMeGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiMeGet200Response.parse_obj(obj)

        _obj = ApiMeGet200Response.parse_obj({
            "id": obj.get("id"),
            "email": obj.get("email"),
            "exp": obj.get("exp"),
            "pea": obj.get("pea")
        })
        return _obj

