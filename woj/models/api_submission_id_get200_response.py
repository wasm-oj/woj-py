# coding: utf-8

"""
    WASM OJ Wonderland API

    You can interact with WASM OJ Wonderland through this API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: jacob@csie.cool
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from woj.models.api_problem_id_get200_response_problem import ApiProblemIdGet200ResponseProblem
from woj.models.api_submission_id_get200_response_submission import ApiSubmissionIdGet200ResponseSubmission

class ApiSubmissionIdGet200Response(BaseModel):
    """
    ApiSubmissionIdGet200Response
    """
    submission: ApiSubmissionIdGet200ResponseSubmission = Field(...)
    problem: ApiProblemIdGet200ResponseProblem = Field(...)
    __properties = ["submission", "problem"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiSubmissionIdGet200Response:
        """Create an instance of ApiSubmissionIdGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of submission
        if self.submission:
            _dict['submission'] = self.submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of problem
        if self.problem:
            _dict['problem'] = self.problem.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiSubmissionIdGet200Response:
        """Create an instance of ApiSubmissionIdGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiSubmissionIdGet200Response.parse_obj(obj)

        _obj = ApiSubmissionIdGet200Response.parse_obj({
            "submission": ApiSubmissionIdGet200ResponseSubmission.from_dict(obj.get("submission")) if obj.get("submission") is not None else None,
            "problem": ApiProblemIdGet200ResponseProblem.from_dict(obj.get("problem")) if obj.get("problem") is not None else None
        })
        return _obj

