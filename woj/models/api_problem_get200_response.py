# coding: utf-8

"""
    WASM OJ Wonderland API

    You can interact with WASM OJ Wonderland through this API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: jacob@csie.cool
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from woj.models.api_problem_get200_response_problems_inner import ApiProblemGet200ResponseProblemsInner

class ApiProblemGet200Response(BaseModel):
    """
    ApiProblemGet200Response
    """
    problems: conlist(ApiProblemGet200ResponseProblemsInner) = Field(..., description="List of problems")
    __properties = ["problems"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiProblemGet200Response:
        """Create an instance of ApiProblemGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in problems (list)
        _items = []
        if self.problems:
            for _item in self.problems:
                if _item:
                    _items.append(_item.to_dict())
            _dict['problems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiProblemGet200Response:
        """Create an instance of ApiProblemGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiProblemGet200Response.parse_obj(obj)

        _obj = ApiProblemGet200Response.parse_obj({
            "problems": [ApiProblemGet200ResponseProblemsInner.from_dict(_item) for _item in obj.get("problems")] if obj.get("problems") is not None else None
        })
        return _obj

